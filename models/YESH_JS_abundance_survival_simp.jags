
 model
   {
   # Priors and constraints
                 
   ### SURVIVAL PROBABILITY
   mean.phi ~ dunif(0.95, 1)                      # Priors for age-specific DAILY survival - this is the basic survival that is scaled to difference between occasions
   #mean.p ~ dbeta(1.5, 4)                          # Prior for mean recapture switched to beta from unif
   #logit.p <- log(mean.p / (1-mean.p))           # Logit transformation
   #beta.effort ~ dnorm(0,0.01)                   # Prior for trapping effort offset on capture probability
                 
   for (i in 1:M){
      for (t in 1:(n.years-1)){
          beta.int[i,t] <- pow(mean.phi,periods[t])       ### exponentiates daily survival by the length between capture sessions
          mu[i,t] <- log(beta.int[i,t] / (1-beta.int[i,t]))       # Logit transformation
          logit(phi[i,t]) <- mu[i,t] + surv.raneff[t]
      } #t
                   
                   
                   
       ### RECAPTURE PROBABILITY
                   
       for (t in 1:n.years){
           #logit(p[i,t]) <- logit.p + capt.raneff[i] ###beta.effort*effort[t] + 
           p[i,t] ~ dbeta(1.5, 4) 
       }
    } #i
                 
                 
    ## RANDOM TIME EFFECT ON SURVIVAL
                 
    for (t in 1:(n.years-1)){
        surv.raneff[t] ~ dnorm(0, tau.surv)
        }
                 
    #for (i in 1:M){
    #  capt.raneff[i] ~ dnorm(0, tau.capt)
    #}
                 
                 
    ### PRIORS FOR RANDOM EFFECTS
                 
    sigma.surv ~ dunif(0, 10)                     # Prior for standard deviation of survival
    tau.surv <- pow(sigma.surv, -2)
    #sigma.capt ~ dunif(0, 10)                     # Prior for standard deviation of capture
    #tau.capt <- pow(sigma.capt, -2)
     



            
    ####### LIKELIHOOD #############
                 
    for (t in 1:n.years){
         gamma[t] ~ dunif(0, 1)
    } #t
                 
                 
    # Likelihood
                 
     for (i in 1:M){
                   
          # First occasion
          # State process
          z[i,1] ~ dbern(gamma[1])
                   
          # Observation process
          mu1[i,1] <- z[i,1] * p[i,1]
          y[i,1] ~ dbern(mu1[i,1])
                   
          # Subsequent occasions
          for (t in 2:n.years){
                   # State process
                   #q[i,t-1] <- 1-z[i,t-1]		# Availability for recruitment
                   recru[i,t-1] <- max(z[i,1:(t-1)])		# Availability for recruitment - this will be 0 if the bird has never been observed before and 1 otherwise
                   pot.alive[i,t] <- phi[i,t-1] * z[i,t-1] + gamma[t] * (1-recru[i,t-1])
                   z[i,t] ~ dbern(pot.alive[i,t])
                     
                   # Observation process
                   mu1[i,t] <- z[i,t] * p[i,t]	
                   y[i,t] ~ dbern(mu1[i,t])
                     
           } #t
                   
     } #i 
                 
                 
                 
                 
    # DERIVED PARAMETERS TO REPORT POPULATION SIZE
                 
    for (t in 1:n.years){
           N[t] <- sum(z[1:M,t])        # Actual population size
    } #t
                 
                 
                 
    for (i in 1:M){
           Nind[i] <- sum(z[i,1:n.years])
           Nalive[i] <- 1-equals(Nind[i], 0)
    } #i
                 
                 
                 
    # DERIVED SURVIVAL PROBABILITIES PER YEAR 
    ann.surv <- pow(mean.phi,365)
                 
}								#### END OF THE FUNCTION LOOP
               

